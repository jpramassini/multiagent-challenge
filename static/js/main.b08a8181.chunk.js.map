{"version":3,"sources":["configs.js","App.js","index.js"],"names":["graphConfig","automaticRearrangeAfterDropNode","collapsible","directed","focusAnimationDuration","focusZoom","height","highlightDegree","highlightOpacity","linkHighlightBehavior","maxZoom","minZoom","nodeHighlightBehavior","panAndZoom","staticGraph","width","d3","alphaTarget","gravity","linkLength","linkStrength","node","color","fontColor","fontSize","fontWeight","highlightColor","highlightFontSize","highlightFontWeight","highlightStrokeColor","highlightStrokeWidth","labelProperty","mouseCursor","opacity","renderLabel","size","strokeColor","strokeWidth","svg","symbolType","link","semanticStrokeWidth","START_VAL","randomIntInRange","min","max","parseInt","Math","random","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setNodesCount","newNum","maxEdges","setState","n","state","k","setEdgeCount","generateGraph","event","nodes","links","nodeConnections","i","push","id","source","length","target","indexOf","data","checkForCycle","loading","queue","visited","next","shift","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","err","return","addEdge","checked","every","item","alert","react_default","a","createElement","className","style","marginBottom","marginTop","borderRadius","boxShadow","margin","lib","config","onClickNode","react_numeric_input_default","onChange","onClick","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b08a8181.chunk.js","sourcesContent":["export const graphConfig = {\r\n  automaticRearrangeAfterDropNode: false,\r\n  collapsible: false,\r\n  directed: false,\r\n  focusAnimationDuration: 0.75,\r\n  focusZoom: 1,\r\n  height: 600,\r\n  highlightDegree: 1,\r\n  highlightOpacity: 0.2,\r\n  linkHighlightBehavior: true,\r\n  maxZoom: 4,\r\n  minZoom: 0.1,\r\n  nodeHighlightBehavior: true,\r\n  panAndZoom: true,\r\n  staticGraph: false,\r\n  width: 900,\r\n  d3: {\r\n    alphaTarget: 0.06,\r\n    gravity: -1000,\r\n    linkLength: 75,\r\n    linkStrength: 1\r\n  },\r\n  node: {\r\n    color: \"#7C8993\",\r\n    fontColor: \"black\",\r\n    fontSize: 10,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"#3A3A3A\",\r\n    highlightFontSize: 12,\r\n    highlightFontWeight: \"bold\",\r\n    highlightStrokeColor: \"SAME\",\r\n    highlightStrokeWidth: 1.5,\r\n    labelProperty: \"id\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: true,\r\n    size: 450,\r\n    strokeColor: \"none\",\r\n    strokeWidth: 1.5,\r\n    svg: \"\",\r\n    symbolType: \"circle\"\r\n  },\r\n  link: {\r\n    color: \"#d3d3d3\",\r\n    fontColor: \"black\",\r\n    fontSize: 8,\r\n    fontWeight: \"normal\",\r\n    highlightColor: \"#e87f18\",\r\n    highlightFontSize: 8,\r\n    highlightFontWeight: \"normal\",\r\n    labelProperty: \"label\",\r\n    mouseCursor: \"pointer\",\r\n    opacity: 1,\r\n    renderLabel: false,\r\n    semanticStrokeWidth: false,\r\n    strokeWidth: 4\r\n  }\r\n};\r\n","import React from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport NumericInput from \"react-numeric-input\";\nimport { graphConfig } from \"./configs.js\";\n\nimport \"./App.css\";\n\nconst START_VAL = 36;\n\nfunction randomIntInRange(min, max) {\n  return parseInt(Math.random() * (max - min + 1) + min);\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      n: START_VAL,\n      k: parseInt((START_VAL * (START_VAL - 1)) / 24),\n      maxEdges: parseInt((START_VAL * (START_VAL - 1)) / 2),\n      data: {\n        nodes: [],\n        links: []\n      },\n      nodeConnections: [],\n      loading: false\n    };\n  }\n\n  setNodesCount = newNum => {\n    //console.log(newNum);\n    let maxEdges = (newNum * (newNum - 1)) / 2;\n    this.setState({ n: newNum, maxEdges });\n    if (this.state.k > maxEdges) {\n      //console.log(\"New k: \" + maxEdges);\n      this.setState({ k: maxEdges });\n    }\n  };\n\n  setEdgeCount = newNum => {\n    //console.log(\"New K: \" + newNum);\n    this.setState({ k: newNum });\n  };\n\n  generateGraph = event => {\n    // Storing local copies\n    let n = this.state.n;\n    let k = this.state.k;\n\n    // Arrays to hold nodes and edge connection objects.\n    let nodes = [];\n    let links = [];\n\n    // Dict for each node, showing all nodes it's connected to.\n    let nodeConnections = [];\n\n    // Generate nodes from 0 to n-1, push onto array.\n    for (let i = 0; i < n; i++) {\n      nodes.push({ id: i });\n      nodeConnections[i] = [];\n    }\n\n    // Generate edges...\n    for (let i = 0; i < k; i++) {\n      let source;\n      do {\n        source = randomIntInRange(0, n - 1);\n      } while (nodeConnections[source].length === n - 1);\n      //console.log(\"Source: \" + source);\n      let target;\n      do {\n        // Loops until valid target is found.\n        target = randomIntInRange(0, n - 1);\n      } while (\n        target === source ||\n        nodeConnections[target].length === n - 1 ||\n        nodeConnections[source].indexOf(target) > -1\n      ); // To ensure no self-connections or double connections\n\n      nodeConnections[source].push(parseInt(target));\n      nodeConnections[target].push(parseInt(source));\n      links.push({ source: source, target: target });\n    }\n    let data = {\n      nodes,\n      links\n    };\n\n    this.setState({ data, nodeConnections });\n  };\n\n  checkForCycle = (source, target) => {\n    this.setState({ loading: true });\n    //console.log(\"In check for cycle: \" + source);\n    //console.log(\"Target is \" + target);\n    let queue = [];\n    let visited = {};\n    visited[source] = true;\n    queue.push(source);\n\n    while (queue.length !== 0) {\n      let next = queue.shift();\n      visited[next] = true;\n      for (let node of this.state.nodeConnections[next]) {\n        //console.log(\"Checking node \" + next);\n        if (!visited[node]) {\n          if (node === target) {\n            //console.log(`${source} to ${target} would make a cycle.`);\n            return true;\n          } else {\n            queue.push(node);\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  addEdge = source => {\n    if (this.state.nodeConnections[source].length === this.state.n - 1) {\n      alert(\"No more edges can be connected.\");\n      return;\n    }\n\n    let target;\n    let checked = [];\n    for (let i = 0; i < this.state.n; i++) {\n      checked[i] = false;\n    }\n    checked[source] = true;\n\n    do {\n      if (\n        checked.every(item => {\n          return item === true;\n        })\n      ) {\n        alert(\n          \"Unable to make another edge, doing so would create a new cycle.\"\n        );\n        return;\n      }\n      target = randomIntInRange(0, this.state.n - 1);\n      checked[target] = true;\n    } while (\n      target === parseInt(source) ||\n      this.state.nodeConnections[target].length === this.state.n - 1 ||\n      this.state.nodeConnections[source].indexOf(target) > -1 ||\n      this.checkForCycle(source, target)\n    );\n    let data = this.state.data;\n    let nodeConnections = this.state.nodeConnections;\n    nodeConnections[source].push(target);\n    nodeConnections[target].push(source);\n    data.links.push({ source: parseInt(source), target: target });\n    this.setState({ data, nodeConnections });\n  };\n\n  componentWillMount() {\n    this.generateGraph(0);\n  }\n\n  render() {\n    //console.log(this.state);\n    if (this.state.data.nodes.length > 0) {\n      return (\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h3 style={{ marginBottom: 0 }}>Multiagent Systems Challenge</h3>\n            <h5 style={{ marginBottom: \"2em\", marginTop: \".75em\" }}>\n              JP Ramassini\n            </h5>\n          </div>\n          <div\n            style={{\n              borderRadius: 10,\n              boxShadow:\n                \"0 4px 8px 0 rgba(0,0,0,0.12), 0 2px 4px 0 rgba(0,0,0,0.08)\",\n              margin: \"2.5%\"\n            }}>\n            <Graph\n              id=\"graph-id\"\n              data={this.state.data}\n              config={graphConfig}\n              onClickNode={this.addEdge}\n            />\n          </div>\n          <div>\n            <label className={\"input-label\"}>N</label>\n            <NumericInput\n              min={2}\n              max={100}\n              value={this.state.n}\n              onChange={this.setNodesCount}\n              className={\"numeric-input\"}\n            />\n            <label className={\"input-label\"}>K</label>\n            <NumericInput\n              min={1}\n              max={this.state.maxEdges}\n              value={this.state.k}\n              onChange={this.setEdgeCount}\n              className={\"numeric-input\"}\n            />\n            <button className={\"generate-button\"} onClick={this.generateGraph}>\n              Generate Graph\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <label className={\"input-label\"}>N</label>\n          <NumericInput\n            min={2}\n            max={100}\n            value={this.state.n}\n            onChange={this.setNodesCount}\n            className={\"numeric-input\"}\n          />\n          <label className={\"input-label\"}>K</label>\n          <NumericInput\n            min={1}\n            max={this.state.maxEdges}\n            value={this.state.k}\n            onChange={this.setEdgeCount}\n            className={\"numeric-input\"}\n          />\n          <button className={\"generate-button\"} onClick={this.generateGraph}>\n            Generate Graph\n          </button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}